@page "/library"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.QuickGrid
@using Utilities
@using Models
@using BookStacks = List<List<Models.BookData>>
@using Shelves = List<List<List<Models.BookData>>>>

<PageTitle>Library</PageTitle>

<h3>My Library</h3>

<input @bind="newTitle" />
<input @bind="newAuthor" />
<button @onclick="AddBook">Add Book</button>
<hr/>
<button @onclick="RemoveBook">Remove Selected Book</button>

<div id="shelf-container" class="shelf-container">
    @foreach (var shelf in shelves)
    {
        <div class="shelf">
            @foreach (var stack in shelf)
            {
                <div class="book-stack">
                    @foreach (var book in stack)
                    {
                        <button
                        @onclick="@(() => SelectBook(book))"
                        class="book-spine"
                        style="background-color: @(selectedBook == book ? highlighColor : book.BackgroundColor)">
                            @book.Title - @book.Author
                        </button>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    BookData? selectedBook;
    string? newTitle;
    string? newAuthor;

    string highlighColor = "rgb(0,0,0)";

    private const int MaxBooksPerStack = 3;
    private int StackWidth = 200; // Approximate width of each stack including margin
    private int ContainerWidth;

    public async void AddBook()
    {
        if (!ValidateBook())
            return;

        // Create book data with bew values
        BookData newBookData = new() { Title = newTitle, Author = newAuthor };
        newBookData.GenerateRandomBackgroundColor();
        BookLibrary.Instance.AddBook(newBookData);

        // Reset UI data
        newTitle = string.Empty;
        newAuthor = string.Empty;

        await OrganizeBooks();
    }

    private bool ValidateBook()
    {
        if (string.IsNullOrWhiteSpace(newTitle) || string.IsNullOrWhiteSpace(newAuthor))
            return false;

        if (BookLibrary.Instance.books.Any(bd => bd.Title == newTitle && bd.Author == newAuthor))
            return false;

        return true;
    }

    public async void RemoveBook()
    {
        if (selectedBook == null)
            return;

        BookLibrary.Instance.RemoveBook(selectedBook);
        await OrganizeBooks();
    }

    public void SelectBook(BookData data) => selectedBook = selectedBook == data ? null : selectedBook;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Measure container and adjust stacks on load
        if (firstRender)
            await OrganizeBooks();
    }

    BookStacks stacks = new();
    Shelves shelves = new();

    private async Task OrganizeBooks()
    {
        // Measure container width via JavaScript
        ContainerWidth = await JSRuntime.InvokeAsync<int>("getContainerWidth", "shelf-container");
        int stacksPerShelf = Math.Max(1, ContainerWidth / StackWidth);

        stacks = BookLibrary.Instance.books.Chunk(MaxBooksPerStack).Select(x => x.ToList()).ToList();
        shelves = stacks.Chunk(stacksPerShelf).Select(x => x.ToList()).ToList();

        // Distribute books into visible stacks
        StateHasChanged();
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}
